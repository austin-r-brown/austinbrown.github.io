// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arrays) {
  // Return the reduced array of arrays as a single array 
  return arrays.reduce((acc, val) => acc.concat(val))
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  // While the current (input) value still comes back as true when passed to the 'test' function
  while (test(value)) {
    // Pass the current value to the 'body' function
    body(value)
    // Set a new value using the return of the current value passed to the 'update' function
    value = update(value)
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  // Check every element of the input array
  for (let element of array) {
    // If any element does not come back with true when passed to the input 'test' function
    if (!test(element)) {
      // Return false
      return false
    }
  }
  // Return true
  return true
}

//return array.every((val) => test(val))

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// I have to be honest, I really do not understand this one at, despite all of the resources available to me
function dominantDirection(text) {

  let counted = countBy(text, char => {

    let script = characterScript(char.codePointAt(0));

    return script ? script.direction : "none";

  }).filter(({name}) => name != "none");

  if (counted.length == 0) return "ltr";
  
  return counted.reduce((a, b) => a.count > b.count ? a : b).name;
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
